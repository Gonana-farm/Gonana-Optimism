{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/Gona.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ncontract GonaToken is ERC20, Ownable {\n    constructor() ERC20(\"Gona\", \"GNA\") {\n        _mint(msg.sender, 1000000 * (10**decimals()));\n    }\n\n    //event Transfer(address indexed from, address indexed to, uint256 value);\n    //event Approval(address indexed owner, address indexed spender, uint256 value);\n\n\n    function mint(address account, uint256 amount) external onlyOwner {\n        _mint(account, amount);\n    }\n\n    fallback() external {\n        // revert(\"\");\n    }\n}"
    },
    "contracts/Marketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport {  Errors } from \"./utils/Errors.sol\";\nimport {IBlast} from \"./utils/Iblast.sol\";\n\ncontract Marketplace {\n\n    address private owner;\n    IBlast immutable blast = IBlast(0x4300000000000000000000000000000000000002);\n\n    enum ProductState { Listed, Escrowed, Confirmed, Cancelled }\n\n    struct Product {\n        string productID;\n        uint256 amount;\n        address wallet;\n        string hash;\n        string merchantID;\n        ProductState state;\n    }\n\n    struct Order {\n        string productID;\n        uint256 amount;\n        address buyerAddress;\n        string buyerID;\n        // bool paid;\n    }\n\n    struct Redeem {\n        address id;\n        uint256 gas;\n    }\n\n    mapping(string => Product) public products;\n    mapping(string => Order) public orders;\n    mapping(address => uint256) public gasSpent;\n\n    Redeem[] claims ;\n\n    event ProductCreated(string productID, uint256 amount, address indexed seller);\n    // event ProductListed(string productID, uint256 amount, address seller);\n    event ProductListed(string productID, uint256 amount);\n    event ProductUnlisted(string productID);\n    event OrderPlaced(string productID, uint256 amount, address buyer);\n    event OrderConfirmed(string productID, address buyer);\n    event GasClaimed(uint256 indexed time, uint256 indexed amount);\n\n   \n\n    // modifier onlyProductState(string memory _productID, ProductState _requiredState) {\n    //     require(products[_productID].state == _requiredState, InvalidProductState());\n    //     _;\n    // }\n\n    //***** */ */\n\n    constructor(){\n        owner = msg.sender;\n        IBlast(0x4300000000000000000000000000000000000002).configureClaimableGas();\n        IBlast(0x4300000000000000000000000000000000000002).configureGovernor(address(this));\n\n    }\n\n    modifier onlySeller(string memory _productID) {\n        if (products[_productID].wallet == msg.sender){ \n            revert Errors.WrongSignature();\n        }\n        _;\n    }\n\n    modifier onlyBuyer(string memory _productID) {\n        if(orders[_productID].buyerAddress == msg.sender){ \n            revert Errors.WrongSignature();\n        }\n        _;\n    }\n\n    modifier onlyOwner() {\n        if(msg.sender != owner){\n            revert Errors.NotOwner();\n        }\n        _;\n    }\n\n\n    function createProduct(\n        string memory _productID, \n        uint256 _amount,\n        string memory _merchantID,\n        address creator\n    ) external onlyOwner {\n        if(products[_productID].wallet == address(0)){ revert Errors.ProductAlreadyExists();}\n        products[_productID] = Product(_productID, _amount, payable(creator), \"\", _merchantID, ProductState.Listed);\n        _listProduct(_productID,\"\");\n    }\n\n    function _listProduct(string memory _productID, string memory _hash) internal {\n        //require(products[_productID].state == ProductState.Listed, InvalidProductState());\n        products[_productID].hash = _hash;\n        products[_productID].state = ProductState.Listed;\n        // emit ProductListed(_productID, products[_productID].amount, msg.sender);\n        emit ProductListed(_productID, products[_productID].amount);\n    }\n\n    function unlistProduct(string memory _productID) external onlyOwner {\n        if(products[_productID].state == ProductState.Listed){ revert Errors.InvalidProductState();}\n        products[_productID].state = ProductState.Cancelled;\n        emit ProductUnlisted(_productID);\n    }\n\n    // function orderProduct(string memory _productID) external payable {\n    //     require(products[_productID].state == ProductState.Escrowed, \"Product not available\");\n    //     require(msg.value == products[_productID].amount, \"Incorrect amount sent\");\n    //     require(!orders[_productID].paid, \"Order already placed\");\n\n    //     orders[_productID] = Order(_productID, msg.value, payable(msg.sender), true);\n    //     products[_productID].seller.transfer(msg.value); // Send amount to the seller\n    //     emit OrderPlaced(_productID, msg.value, msg.sender);\n    // }\n\n    function orderProduct(\n        string memory _productID,\n        uint256 _amount,\n        string memory _buyerID\n    ) external payable {\n        //require(products[_productID], Errors.ProductNotFound());\n        if(products[_productID].state == ProductState.Listed) {revert Errors.InvalidProductState();}\n        // ensure the value inputed is same as the product amount listed\n        if(products[_productID].amount == _amount){ revert Errors.InvalidPrice();}\n        // ensure the value sent is the amount listed\n        if(msg.value == _amount){ revert Errors.InsufficientFunds();}\n\n        orders[_productID] = Order(_productID, _amount, msg.sender, _buyerID);\n        products[_productID].state = ProductState.Escrowed;\n        // escrow logic to hold funds until confirmed \n        //(transfer funds from the buyer to escrow account)\n        gasSpent[msg.sender] = tx.gasprice;\n        emit OrderPlaced(_productID, _amount, msg.sender);\n        uint amount = claimAllGas();\n        emit GasClaimed(block.timestamp, amount);\n    } \n\n    function confirmOrder(string memory _productID) external onlyOwner {\n        //require(orders[_productID], Errors.OrderNotFound());\n        if(products[_productID].state == ProductState.Escrowed) {revert Errors.InvalidProductState();}\n        //require(orders[_productID].paid, \"No order placed\");\n\n        // logic to release funds in escrow account to seller\n\n        products[_productID].state = ProductState.Confirmed;\n        uint256 amount = products[_productID].amount;\n        (bool success,) = products[_productID].wallet.call{value:amount}(\"\");\n        if (!success) {\n            revert Errors.TransacationWasNotSuccessful();\n        }\n        emit OrderConfirmed(_productID, orders[_productID].buyerAddress);\n    }\n\n    function cancelOrder(string memory _productID) external onlyBuyer(_productID) {\n        //require(orders[_productID],  Errors.OrderNotFound);\n        if(products[_productID].state == ProductState.Escrowed) {revert Errors.InvalidProductState();}\n\n        // ensure funds are in escrow account\n        // require(orders[_productID].paid, \"No order placed\");\n\n        // Refund the buyer from escrow account\n        payable(msg.sender).transfer(orders[_productID].amount); \n        delete orders[_productID];\n        products[_productID].state = ProductState.Cancelled;\n    }\n\n    function changeOwner(address _owner) public onlyOwner {\n        assembly {\n            sstore(0x00, _owner)\n        }\n    }\n\n    function viewOrder(string memory _productID) external view returns (Order memory) {\n        return orders[_productID];\n    }\n\n    function viewProduct(string memory _productID) external view returns (Product memory) {\n        return products[_productID];\n    }\n\n    function claimAllGas() public returns(uint amount) {\n\t    // This function is public meaning anyone can claim the gas\n\t\tamount = blast.claimAllGas(address(this), address(this));\n\n    }\n    \n    function redeemGas(address caller) external returns(bool sent) {\n        if (gasSpent[caller] == 0 ) {\n            revert Errors.DoNotHaveGasSpent();\n        }\n        claimAllGas();\n        uint256 amountDue = gasSpent[caller];\n        gasSpent[caller] = 0;\n        (sent,) = caller.call{value:amountDue}(\"\");\n        if (!sent) {\n            revert Errors.TransacationWasNotSuccessful();\n        }\n\n    }\n\n    function checkGasDue()external view returns (uint amount){\n        (,amount,,) = blast.readGasParams(address(this));\n    }\n\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./Gona.sol\";\n\ncontract StakingContract is Ownable {\n    using SafeMath for uint256;\n\n    GonaToken public gonaToken;\n    mapping(address => uint256) public stakingBalance;\n    mapping(address => uint256) public lastClaimTime;\n\n    uint256 public rewardRate = 1; // Gona tokens per second\n\n    event Staked(address indexed staker, uint256 amount);\n    event Unstaked(address indexed staker, uint256 amount);\n    event RewardClaimed(address indexed staker, uint256 amount);\n\n    constructor(GonaToken _gonaToken) {\n        gonaToken = _gonaToken;\n    }\n\n    function stake(uint256 amount) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n        \n        updateReward(msg.sender);\n\n        gonaToken.transferFrom(msg.sender, address(this), amount);\n        stakingBalance[msg.sender] = stakingBalance[msg.sender].add(amount);\n\n        emit Staked(msg.sender, amount);\n    }\n\n    function unstake(uint256 amount) external {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(stakingBalance[msg.sender] >= amount, \"Insufficient staked balance\");\n\n        updateReward(msg.sender);\n\n        gonaToken.transfer(msg.sender, amount);\n        stakingBalance[msg.sender] = stakingBalance[msg.sender].sub(amount);\n\n        emit Unstaked(msg.sender, amount);\n    }\n\n    function claimReward() external {\n        updateReward(msg.sender);\n\n        uint256 reward = calculateReward(msg.sender);\n        require(reward > 0, \"No rewards to claim\");\n\n        gonaToken.mint(msg.sender, reward);\n        lastClaimTime[msg.sender] = block.timestamp;\n\n        emit RewardClaimed(msg.sender, reward);\n    }\n\n    function updateReward(address account) internal {\n        uint256 currentTime = block.timestamp;\n        uint256 elapsedTime = currentTime - lastClaimTime[account];\n\n        uint256 newReward = elapsedTime.mul(rewardRate);\n        stakingBalance[account] = stakingBalance[account].add(newReward);\n        lastClaimTime[account] = currentTime;\n    }\n\n    function calculateReward(address account) public view returns (uint256) {\n        uint256 elapsedTime = block.timestamp - lastClaimTime[account];\n        return elapsedTime.mul(rewardRate);\n    }\n\n    function setRewardRate(uint256 newRewardRate) external onlyOwner {\n        rewardRate = newRewardRate;\n    }\n}\n\n//improvements to come...\n//emergency withdraw...\n//custom errors\n//safemath\n//onlystakers mod\n"
    },
    "contracts/utils/Errors.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.13;\n\n\nlibrary Errors{\n    error NotOwner();\n    error TransacationWasNotSuccessful();\n    error DepositDoesNotMatchAmount();\n    error ProductNotFound();\n    error ProductAlreadyExists();\n    error OrderNotFound();\n    error OrderAlreadyExists();\n    error InvalidProductState();\n    error InsufficientFunds();\n    error InvalidPrice();\n    // error NonceAlreadyUsed();\n    // error WrongContract();\n    error Expired();\n    error WrongFunctionCall();\n    error WrongSignature();\n    error DoNotHaveGasSpent();\n    \n\n\n}\n"
    },
    "contracts/utils/Iblast.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nenum YieldMode {\n    AUTOMATIC,\n    VOID,\n    CLAIMABLE\n}\n\nenum GasMode {\n    VOID,\n    CLAIMABLE \n}\n\ninterface IBlast{\n    // configure\n    function configureContract(address contractAddress, YieldMode _yield, GasMode gasMode, address governor) external;\n    function configure(YieldMode _yield, GasMode gasMode, address governor) external;\n\n    // base configuration options\n    function configureClaimableYield() external;\n    function configureClaimableYieldOnBehalf(address contractAddress) external;\n    function configureAutomaticYield() external;\n    function configureAutomaticYieldOnBehalf(address contractAddress) external;\n    function configureVoidYield() external;\n    function configureVoidYieldOnBehalf(address contractAddress) external;\n    function configureClaimableGas() external;\n    function configureClaimableGasOnBehalf(address contractAddress) external;\n    function configureVoidGas() external;\n    function configureVoidGasOnBehalf(address contractAddress) external;\n    function configureGovernor(address _governor) external;\n    function configureGovernorOnBehalf(address _newGovernor, address contractAddress) external;\n\n    // claim yield\n    function claimYield(address contractAddress, address recipientOfYield, uint256 amount) external returns (uint256);\n    function claimAllYield(address contractAddress, address recipientOfYield) external returns (uint256);\n\n    // claim gas\n    function claimAllGas(address contractAddress, address recipientOfGas) external returns (uint256);\n    function claimGasAtMinClaimRate(address contractAddress, address recipientOfGas, uint256 minClaimRateBips) external returns (uint256);\n    function claimMaxGas(address contractAddress, address recipientOfGas) external returns (uint256);\n    function claimGas(address contractAddress, address recipientOfGas, uint256 gasToClaim, uint256 gasSecondsToConsume) external returns (uint256);\n\n    // read functions\n    function readClaimableYield(address contractAddress) external view returns (uint256);\n    function readYieldConfiguration(address contractAddress) external view returns (uint8);\n    function readGasParams(address contractAddress) external view returns (uint256 etherSeconds, uint256 etherBalance, uint256 lastUpdated, GasMode);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}